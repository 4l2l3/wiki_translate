h1. ABySS
h2. Description 

_From the [[ABySS]] web site_:  [[ABySS]] (Assembly By Short Sequences) is a _de novo_, parallel, paired-end sequence assembler that is designed for short reads. The single-processor version is useful for assembling genomes up to 100 Mbases in size. The parallel version is implemented using MPI and is capable of assembling larger genomes.

** http://www.bcgsc.ca/platform/bioinfo/software/abyss

h2. Version

** *1.2.7*

h2. Authorized Users

** @circe@ account holders

h2. Platforms

** @circe@ cluster

h2. Running [[ABySS]] Jobs on the Cluster

To assemble transcriptome data, see [[transabyss|Trans-ABySS]].

h3. Modules

Before running a job, you must first set up your environment properly.  Here are the required module files:

** apps/abyss/1.2.7

To run [[ABySS]] on the cluster, ensure that you use @module add@ prior to using any executables.  See [[Modules]] for more information.

h3. How to Submit Jobs

Provided are batch scripts for running [[ABySS]] as a single processor or multi-processor job.  These scripts can be copied into your work directory (the folder with your input files and database files) so that you can submit batch processes to the queue.  For help on submitting jobs to the queue, see our [[gridEngineUsers|GridEngine User's Guide]].  These scripts are provided as examples only.  Your SGE and [[ABySS]] options will vary.  View the man page or this site (http://seqanswers.com/wiki/ABySS#Single-end_assembly) for more about [[ABySS]] options.

h3. Serial Submit Script
* Single-end assembly

Assemble short reads in a file named reads.fa into contigs in a file named contigs.fa with the following script:

<pre>
#$ -N abyss_job_name
#$ -l h_rt=hh:mm:ss
#$ -cwd
#$ -j y
#$ -o output.$JOB_ID

module add apps/abyss/1.2.7

ABYSS -k25 reads.fa -o contigs.fa
</pre>

where '-k' is an appropriate k-mer length. The only method to find the optimal value of 'k' is to run multiple trials and inspect the results.  The maximum value for 'k' is 64.


h3. Distributed Parallel
* Paired-end assembly

To assemble paired short reads in two files named reads1.fa and reads2.fa into contigs in a file named ecoli-contigs.fa, use the script:

<pre>
#$ -N abyss_job_name
#$ -l h_rt=hh:mm:ss,pcpus=8
#$ -cwd
#$ -j y
#$ -o output.$JOB_ID

module add apps/abyss/1.2.7

abyss-pe k=25 n=10 in='reads1.fa reads2.fa' name=ecoli
</pre>

where 'k' is the k-mer length as before.  'n' is the minimum number of pairs needed to consider joining two contigs. The optimal value for 'n' must be found by trial. 'in' specifies the input files to read, which may be in FASTA, FASTQ, qseq, export, SAM or BAM format and compressed with gz, bz2 or xz and may be tarred.  The assembled contigs will be stored in ${name}-contigs.fa.

The suffix of the read identifier for a pair of reads must be one of
'1' and '2', or 'A' and 'B', or 'F' and 'R', or 'F3' and 'R3', or
'forward' and 'reverse'. The reads may be interleaved in the same file
or found in different files. If the mates are in different files, it's
highly recommended to place each pair of files adjacent on the command
line and to use an even number of threads. Even if you are running on
a single-processor machine, using two threads will help performance.
Do not group together all the files containing the forwards reads
followed by all the files containing the reverse reads.

Reads without mates should be placed in a file specified by the 'se'
(single-end) parameter. Reads without mates in the paired-end files
will slow down the paired-end assembler considerably during the
!ParseAligns stage.

See also [[transabyss|Trans-ABySS]].

h3. More Job Information
See the following for more detailed job submission information:
** [[gridEngineUsers|SGE User's Guide]]
** [[gridEnginePolicy|Scheduling and Dispatch Policies]]
** [[gridEngineTechn|Advanced Submit Techniques]]

h2. Reporting Bugs
Report bugs to the IT Help Desk: help@usf.edu
